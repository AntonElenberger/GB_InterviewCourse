interface Moveable {
    void move ();
}
interface Stopable {
    void stop ();
}

- Можно соеденить в один интерфейс, метод одного вытекает из другого
- Далее в самих классах нет конструкторов много жестко фиксированных строк где можно использовать геттеры
-
abstract class Car {

    public Engine engine ; // можно сделать приватным

    private String color ;
    private String name ;

    protected void start (){
        System . out . println ( "Car starting" ); // вместо жесткого "Car" можно вставить геттер на имя
    }

    abstract void open ();

    public Engine getEngine () {
        return engine ;
    }

    public void setEngine ( Engine engine ) {
        this . engine = engine ;
    }

    public String getColor () {
        return color ;
    }

    public void setColor ( String color ) {
        this . color = color ;
    }

    public String getName () {
        return name ;
    }

    public void setName ( String name ) {
        this . name = name ;
    }

}

class LightWeightCar extends Car implements Moveable {
    @Override
    void open () {
        System . out . println ( "Car is open" ); //
    }
    @Override
    public void move () {
        System . out . println ( "Car is moving" );
    }
}

class Lorry extends Car , Moveable , Stopable {
    public void move (){
        System . out . println ( "Car is moving" );
    }
    public void stop (){
        System . out . println ( "Car is stop" );
    }
}
